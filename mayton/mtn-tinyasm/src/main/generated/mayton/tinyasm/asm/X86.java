package mayton.tinyasm.asm;


import javax.annotation.processing.Generated;

import java.io.ByteArrayOutputStream;
import java.io.StringWriter;
import java.util.List;

import java.util.ArrayList;


@Generated(value = "Generated by GeneralPurposeBuilder generator", date = "Sun Nov 08 16:11:49 EET 2020", comments = "Do not modify this code manually!")
public class X86 {
    private List<CpuCommand> cmds;
    private X86(List<CpuCommand> cmds) {
        this.cmds = cmds;
    }
    static class X86Builder {
        List<CpuCommand> cmds = new ArrayList<>();
        public X86Builder mov() { 
            cmds.add(new CpuCommand("mov"));
            return this;
        }

        public X86Builder movl() { 
            cmds.add(new CpuCommand("movl"));
            return this;
        }

        public X86Builder movq() { 
            cmds.add(new CpuCommand("movq"));
            return this;
        }

        public X86Builder push() { 
            cmds.add(new CpuCommand("push"));
            return this;
        }

        public X86Builder pushq() { 
            cmds.add(new CpuCommand("pushq"));
            return this;
        }

        public X86Builder pop() { 
            cmds.add(new CpuCommand("pop"));
            return this;
        }

        public X86Builder lea() { 
            cmds.add(new CpuCommand("lea"));
            return this;
        }

        public X86Builder inc() { 
            cmds.add(new CpuCommand("inc"));
            return this;
        }

        public X86Builder dec() { 
            cmds.add(new CpuCommand("dec"));
            return this;
        }

        public X86Builder endbr64() { 
            cmds.add(new CpuCommand("endbr64"));
            return this;
        }

        public X86Builder subq() { 
            cmds.add(new CpuCommand("subq"));
            return this;
        }

        public X86Builder cmpl() { 
            cmds.add(new CpuCommand("cmpl"));
            return this;
        }

        public X86Builder cltd() { 
            cmds.add(new CpuCommand("cltd"));
            return this;
        }

        public X86Builder idivl() { 
            cmds.add(new CpuCommand("idivl"));
            return this;
        }

        public X86Builder leave() { 
            cmds.add(new CpuCommand("leave"));
            return this;
        }

        public X86Builder ret() { 
            cmds.add(new CpuCommand("ret"));
            return this;
        }

        public X86Builder imull() { 
            cmds.add(new CpuCommand("imull"));
            return this;
        }

        public X86Builder addq() { 
            cmds.add(new CpuCommand("addq"));
            return this;
        }

        public X86Builder popq() { 
            cmds.add(new CpuCommand("popq"));
            return this;
        }

        public X86Builder cmpxchg() { 
            cmds.add(new CpuCommand("cmpxchg"));
            return this;
        }

        public X86 build() {
            return new X86(cmds);
        }

    }

    public String dumpCode() {
        StringWriter sw = new StringWriter();
        for (int i = 0; i < cmds.size(); i++) {

        }
        return sw.toString();
    }
}
