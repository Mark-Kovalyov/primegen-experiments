package mayton.tinyasm.asm;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.Yaml;

import java.io.*;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class X86BuilderGenerator {

    static Logger logger = LoggerFactory.getLogger(X86BuilderGenerator.class);

    public static void main(String[] args) throws IOException {
        File dir = new File("src/main/generated/mayton/tinyasm/asm");
        dir.mkdirs();
        Writer writer = new FileWriter("src/main/generated/mayton/tinyasm/asm/X86.txt");
        PrintWriter printWriter = new PrintWriter(writer);
        printWriter.println("package mayton.tinyasm.asm;\n\n");
        printWriter.println("import javax.annotation.processing.Generated;\n");
        printWriter.println("import java.util.List;\n");
        printWriter.println("import java.util.ArrayList;\n\n");
        printWriter.printf("@Generated(value = \"Generated by GeneralPurposeBuilder generator\", date = \"%s\", comments = \"Do not modify this code manually!\")\n", new Date());
        printWriter.println("public class X86 {");
        printWriter.println("    private List<CpuCommand> cmds;");
        printWriter.println("    private X86(List<CpuCommand> cmds) {");
        printWriter.println("        this.cmds = cmds;");
        printWriter.println("    }");


        printWriter.println("    static class X86Builder {");
        printWriter.println("        List<CpuCommand> cmds = new ArrayList<>();");

        Yaml yaml = new Yaml();
        Map<String, Object> map = yaml.load(
                new FileReader("src/main/resources/asm/ia64/X86.yaml"));

        List<Object> mnemonics = (List<Object>) map.get("X86");
        for(Object mnemonic : mnemonics) {
            String javaName = null;
            Integer code = null;
            if (mnemonic instanceof String) {
                logger.info("String mnemonic = {}", mnemonic);
            } else if (mnemonic instanceof LinkedHashMap) {
                logger.info("Linked hash map mnemonic = {}", mnemonic.toString());
                LinkedHashMap<String, Object> yamlArrayItem = (LinkedHashMap<String, Object>) mnemonic;
                Map.Entry<String, Object> res = yamlArrayItem.entrySet().iterator().next();
                LinkedHashMap<String, Object> lhm2 = (LinkedHashMap<String, Object>) res.getValue();

                if (lhm2.containsKey("javaName")) {
                    javaName = (String) lhm2.get("javaName");
                    code = (Integer) lhm2.get("code");
                }

            } else {
                logger.warn("mnemonic type = {}", mnemonic.getClass());
            }
            printWriter.printf("        public X86Builder %s() { \n", mnemonic);
            printWriter.printf("            cmds.add(new CpuCommand(\"%s\"));\n", mnemonic);
            printWriter.printf("            return this;\n");
            printWriter.printf("        }\n\n");
        }
        printWriter.println("    }");
        printWriter.println("}");
        printWriter.close();
    }

}
