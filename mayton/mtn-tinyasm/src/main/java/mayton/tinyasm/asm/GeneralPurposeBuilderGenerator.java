package mayton.tinyasm.asm;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.Yaml;

import java.io.*;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class GeneralPurposeBuilderGenerator {

    static Logger logger = LoggerFactory.getLogger(GeneralPurposeBuilderGenerator.class);

    public static void main(String[] args) throws IOException {
        File dir = new File("src/main/generated/mayton/tinyasm/asm");
        dir.mkdirs();
        Writer writer = new FileWriter("src/main/generated/mayton/tinyasm/asm/GeneralPurpose.txt");
        PrintWriter printWriter = new PrintWriter(writer);
        printWriter.println("package mayton.tinyasm.asm;\n");
        printWriter.println("import javax.annotation.processing.Generated;\n");
        printWriter.printf("@Generated(value = \"Generated by GeneralPurposeBuilder generator\", date = \"%s\", comments = \"Do not modify this code manually!\")\n", new Date());
        printWriter.println("public class GeneralPurpose {");
        printWriter.println("    class GeneralPurposeBuilder {");
        printWriter.println("        List<CpuCommand> cmds = new ArrayList<>();");

        Yaml yaml = new Yaml();
        Map<String, Object> map = yaml.load(
                new FileReader("src/main/resources/asm/ia64/GeneralPuprose.yaml"));

        List<Object> mnemonics = (List<Object>) map.get("GeneralPurpose");
        for(Object mnemonic : mnemonics) {
            if (mnemonic instanceof String) {
                logger.info("mnemonic = {}", mnemonic);
                printWriter.printf("        public GeneralPurposeBuilder %s() { return this; }\n", mnemonic);
            } else if (mnemonic instanceof LinkedHashMap) {
                LinkedHashMap<String, Object> lhm = (LinkedHashMap<String, Object>) mnemonic;
                if (lhm.containsKey("javaName")) {
                    String javaName = (String) lhm.get("javaName");
                    printWriter.printf("        public GeneralPurposeBuilder %s() { return this; }\n", javaName);
                }
            } else {
                logger.warn("mnemonic type = {}", mnemonic.getClass());
            }
        }
        printWriter.println("    }");
        printWriter.println("}");
        printWriter.close();
    }

}
